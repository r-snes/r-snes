use crate::cpu::CPU;

/// An action the CPU will execute during a cycle.
///
/// For [`Read`]/`[`Write`]` cycle, there are no additional fields, the CPU spends
/// the whole cycle reading or writing.
///
/// For internal cycles, any arbitrary action can happen within the CPU, so
/// the [`Internal`] variant holds a function pointer to the rust code to run.
pub(crate) enum InstructionCycle {
    Read,
    Write,
    Internal(fn(&mut CPU) -> ()),
}

/// Type representing the definition of a CPU instruction
///
/// Conceptually, an instruction is simply a list of actions
/// done in 1 cycle each. This is what this type represents.
pub(crate) type Instruction = [InstructionCycle];

/// Table of all SNES CPU instructions.
///
/// Since each one of the 256 possible opcodes is associated with a valid
/// instruction, we can use an array to store them all.
///
/// When all instructions will be implemented, the [`Option`] wrapper
/// will be removed.
pub(crate) const INSTRUCTIONS: [Option<&'static Instruction>; 256] = [
    /* 00 */ None,
    /* 01 */ None,
    /* 02 */ None,
    /* 03 */ None,
    /* 04 */ None,
    /* 05 */ None,
    /* 06 */ None,
    /* 07 */ None,
    /* 08 */ None,
    /* 09 */ None,
    /* 0a */ None,
    /* 0b */ None,
    /* 0c */ None,
    /* 0d */ None,
    /* 0e */ None,
    /* 0f */ None,
    /* 10 */ None,
    /* 11 */ None,
    /* 12 */ None,
    /* 13 */ None,
    /* 14 */ None,
    /* 15 */ None,
    /* 16 */ None,
    /* 17 */ None,
    /* 18 */ None,
    /* 19 */ None,
    /* 1a */ None,
    /* 1b */ None,
    /* 1c */ None,
    /* 1d */ None,
    /* 1e */ None,
    /* 1f */ None,
    /* 20 */ None,
    /* 21 */ None,
    /* 22 */ None,
    /* 23 */ None,
    /* 24 */ None,
    /* 25 */ None,
    /* 26 */ None,
    /* 27 */ None,
    /* 28 */ None,
    /* 29 */ None,
    /* 2a */ None,
    /* 2b */ None,
    /* 2c */ None,
    /* 2d */ None,
    /* 2e */ None,
    /* 2f */ None,
    /* 30 */ None,
    /* 31 */ None,
    /* 32 */ None,
    /* 33 */ None,
    /* 34 */ None,
    /* 35 */ None,
    /* 36 */ None,
    /* 37 */ None,
    /* 38 */ None,
    /* 39 */ None,
    /* 3a */ None,
    /* 3b */ None,
    /* 3c */ None,
    /* 3d */ None,
    /* 3e */ None,
    /* 3f */ None,
    /* 40 */ None,
    /* 41 */ None,
    /* 42 */ None,
    /* 43 */ None,
    /* 44 */ None,
    /* 45 */ None,
    /* 46 */ None,
    /* 47 */ None,
    /* 48 */ None,
    /* 49 */ None,
    /* 4a */ None,
    /* 4b */ None,
    /* 4c */ None,
    /* 4d */ None,
    /* 4e */ None,
    /* 4f */ None,
    /* 50 */ None,
    /* 51 */ None,
    /* 52 */ None,
    /* 53 */ None,
    /* 54 */ None,
    /* 55 */ None,
    /* 56 */ None,
    /* 57 */ None,
    /* 58 */ None,
    /* 59 */ None,
    /* 5a */ None,
    /* 5b */ None,
    /* 5c */ None,
    /* 5d */ None,
    /* 5e */ None,
    /* 5f */ None,
    /* 60 */ None,
    /* 61 */ None,
    /* 62 */ None,
    /* 63 */ None,
    /* 64 */ None,
    /* 65 */ None,
    /* 66 */ None,
    /* 67 */ None,
    /* 68 */ None,
    /* 69 */ None,
    /* 6a */ None,
    /* 6b */ None,
    /* 6c */ None,
    /* 6d */ None,
    /* 6e */ None,
    /* 6f */ None,
    /* 70 */ None,
    /* 71 */ None,
    /* 72 */ None,
    /* 73 */ None,
    /* 74 */ None,
    /* 75 */ None,
    /* 76 */ None,
    /* 77 */ None,
    /* 78 */ None,
    /* 79 */ None,
    /* 7a */ None,
    /* 7b */ None,
    /* 7c */ None,
    /* 7d */ None,
    /* 7e */ None,
    /* 7f */ None,
    /* 80 */ None,
    /* 81 */ None,
    /* 82 */ None,
    /* 83 */ None,
    /* 84 */ None,
    /* 85 */ None,
    /* 86 */ None,
    /* 87 */ None,
    /* 88 */ None,
    /* 89 */ None,
    /* 8a */ None,
    /* 8b */ None,
    /* 8c */ None,
    /* 8d */ None,
    /* 8e */ None,
    /* 8f */ None,
    /* 90 */ None,
    /* 91 */ None,
    /* 92 */ None,
    /* 93 */ None,
    /* 94 */ None,
    /* 95 */ None,
    /* 96 */ None,
    /* 97 */ None,
    /* 98 */ None,
    /* 99 */ None,
    /* 9a */ None,
    /* 9b */ None,
    /* 9c */ None,
    /* 9d */ None,
    /* 9e */ None,
    /* 9f */ None,
    /* a0 */ None,
    /* a1 */ None,
    /* a2 */ None,
    /* a3 */ None,
    /* a4 */ None,
    /* a5 */ None,
    /* a6 */ None,
    /* a7 */ None,
    /* a8 */ None,
    /* a9 */ None,
    /* aa */ None,
    /* ab */ None,
    /* ac */ None,
    /* ad */ None,
    /* ae */ None,
    /* af */ None,
    /* b0 */ None,
    /* b1 */ None,
    /* b2 */ None,
    /* b3 */ None,
    /* b4 */ None,
    /* b5 */ None,
    /* b6 */ None,
    /* b7 */ None,
    /* b8 */ None,
    /* b9 */ None,
    /* ba */ None,
    /* bb */ None,
    /* bc */ None,
    /* bd */ None,
    /* be */ None,
    /* bf */ None,
    /* c0 */ None,
    /* c1 */ None,
    /* c2 */ None,
    /* c3 */ None,
    /* c4 */ None,
    /* c5 */ None,
    /* c6 */ None,
    /* c7 */ None,
    /* c8 */ None,
    /* c9 */ None,
    /* ca */ None,
    /* cb */ None,
    /* cc */ None,
    /* cd */ None,
    /* ce */ None,
    /* cf */ None,
    /* d0 */ None,
    /* d1 */ None,
    /* d2 */ None,
    /* d3 */ None,
    /* d4 */ None,
    /* d5 */ None,
    /* d6 */ None,
    /* d7 */ None,
    /* d8 */ None,
    /* d9 */ None,
    /* da */ None,
    /* db */ None,
    /* dc */ None,
    /* dd */ None,
    /* de */ None,
    /* df */ None,
    /* e0 */ None,
    /* e1 */ None,
    /* e2 */ None,
    /* e3 */ None,
    /* e4 */ None,
    /* e5 */ None,
    /* e6 */ None,
    /* e7 */ None,
    /* e8 */ Some(&[InstructionCycle::Internal(CPU::inx)]),
    /* e9 */ None,
    /* ea */ Some(&[InstructionCycle::Internal(|_| {})]), // No-op, do nothing
    /* eb */ None,
    /* ec */ None,
    /* ed */ None,
    /* ee */ None,
    /* ef */ None,
    /* f0 */ None,
    /* f1 */ None,
    /* f2 */ None,
    /* f3 */ None,
    /* f4 */ None,
    /* f5 */ None,
    /* f6 */ None,
    /* f7 */ None,
    /* f8 */ None,
    /* f9 */ None,
    /* fa */ None,
    /* fb */ None,
    /* fc */ None,
    /* fd */ None,
    /* fe */ None,
    /* ff */ None,
];
